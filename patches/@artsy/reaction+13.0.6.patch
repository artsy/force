patch-package
--- a/node_modules/@artsy/reaction/dist/Artsy/Router/buildServerApp.js
+++ b/node_modules/@artsy/reaction/dist/Artsy/Router/buildServerApp.js
@@ -27,15 +27,13 @@ var _createRender = _interopRequireDefault(require("found/lib/createRender"));
 
 var _server = require("found/lib/server");
 
-var _server2 = require("loadable-components/server");
-
 var _react = _interopRequireDefault(require("react"));
 
-var _server3 = _interopRequireDefault(require("react-dom/server"));
+var _server2 = _interopRequireDefault(require("react-dom/server"));
 
 var _serializeJavascript = _interopRequireDefault(require("serialize-javascript"));
 
-var _collectSSRStyles = require("../../Utils/collectSSRStyles");
+var _styledComponents = require("styled-components");
 
 var _getUser = require("../../Utils/getUser");
 
@@ -63,7 +61,7 @@ function buildServerApp(config) {
     var _ref = _asyncToGenerator(
     /*#__PURE__*/
     regeneratorRuntime.mark(function _callee2(resolve, reject) {
-      var _config$context, context, _config$routes, routes, _url, _userAgent, user, relayEnvironment, historyMiddlewares, resolver, render, _ref2, _redirect, _status, element, _headTags, matchingMediaQueries, _ServerApp, _ref3, loadableState, _relayData, _styleTags, relayData, _scripts;
+      var _config$context, context, _config$routes, routes, _url, _userAgent, user, relayEnvironment, historyMiddlewares, resolver, render, _ref2, _redirect, _status, element, _headTags, matchingMediaQueries, sheet, _ServerApp, _ref3, loadableState, _relayData, _styleTags, bodyHTML, relayData, _scripts;
 
       return regeneratorRuntime.wrap(function _callee2$(_context2) {
         while (1) {
@@ -110,6 +108,8 @@ function buildServerApp(config) {
               }, MediaStyle)];
               matchingMediaQueries = _userAgent && (0, _matchingMediaQueriesForUserAgent.matchingMediaQueriesForUserAgent)(_userAgent); // prettier-ignore
 
+              sheet = new _styledComponents.ServerStyleSheet();
+
               _ServerApp = function _ServerApp() {
                 return _react.default.createElement(_Boot.Boot, {
                   context: context,
@@ -122,40 +122,40 @@ function buildServerApp(config) {
                 }, element);
               };
 
-              _context2.next = 21;
+              _context2.next = 22;
               return (0, _trace.trace)("buildServerApp.fetch", _asyncToGenerator(
               /*#__PURE__*/
               regeneratorRuntime.mark(function _callee() {
-                var state, tags, data;
+                var state, data, html, tags;
                 return regeneratorRuntime.wrap(function _callee$(_context) {
                   while (1) {
                     switch (_context.prev = _context.next) {
                       case 0:
                         // Kick off relay requests to prime cache. TODO: Remove the need to
                         // do this by using persisted queries.
-                        _server3.default.renderToString(_react.default.createElement(_ServerApp, null)); // Extract render queue for bundle split components using dyanamic `import()`
-
+                        _server2.default.renderToString(sheet.collectStyles(_react.default.createElement(_ServerApp, null))); // Extract render queue for bundle split components using dyanamic `import()`
 
-                        _context.next = 3;
-                        return (0, _server2.getLoadableState)(_react.default.createElement(_ServerApp, null));
 
-                      case 3:
-                        state = _context.sent;
+                        state = null; // await getLoadableState(<ServerApp />)
                         // Extract CSS styleTags to inject for SSR pass
-                        tags = (0, _collectSSRStyles.collectSSRStyles)(_react.default.createElement(_ServerApp, null)); // Get serializable Relay data for rehydration on the client
+                        // const tags = collectSSRStyles(<ServerApp />)
+                        // Get serializable Relay data for rehydration on the client
 
-                        _context.next = 7;
+                        _context.next = 4;
                         return relayEnvironment.relaySSRMiddleware.getCache();
 
-                      case 7:
+                      case 4:
                         data = _context.sent;
+                        html = _server2.default.renderToString(sheet.collectStyles(_react.default.createElement(_ServerApp, null)));
+                        tags = sheet.getStyleTags();
                         return _context.abrupt("return", {
                           loadableState: state,
                           relayData: data,
-                          styleTags: tags
+                          styleTags: tags,
+                          bodyHTML: html
                         });
 
-                      case 9:
+                      case 8:
                       case "end":
                         return _context.stop();
                     }
@@ -163,11 +163,12 @@ function buildServerApp(config) {
                 }, _callee, this);
               }))());
 
-            case 21:
+            case 22:
               _ref3 = _context2.sent;
               loadableState = _ref3.loadableState;
               _relayData = _ref3.relayData;
               _styleTags = _ref3.styleTags;
+              bodyHTML = _ref3.bodyHTML;
               // Strip response of problematic data structures
               relayData = cleanRelayData(_relayData); // Build up script tags to inject into head
 
@@ -180,27 +181,28 @@ function buildServerApp(config) {
               _scripts.push("\n          <script>\n            var __RELAY_BOOTSTRAP__ = ".concat(serializeRelayData(relayData), ";\n          </script>\n        "));
 
               resolve({
-                ServerApp: _ServerApp,
+                // ServerApp,
+                bodyHTML: bodyHTML,
                 status: _status,
                 headTags: _headTags,
                 styleTags: _styleTags,
                 scripts: _scripts.join("\n")
               });
-              _context2.next = 36;
+              _context2.next = 38;
               break;
 
-            case 32:
-              _context2.prev = 32;
+            case 34:
+              _context2.prev = 34;
               _context2.t0 = _context2["catch"](0);
               console.error("[Artsy/Router/buildServerApp] Error:", _context2.t0);
               reject(_context2.t0);
 
-            case 36:
+            case 38:
             case "end":
               return _context2.stop();
           }
         }
-      }, _callee2, this, [[0, 32]]);
+      }, _callee2, this, [[0, 34]]);
     }));
 
     return function (_x, _x2) {
--- a/node_modules/@artsy/reaction/dist/Artsy/Router/buildServerApp.js.map
+++ b/node_modules/@artsy/reaction/dist/Artsy/Router/buildServerApp.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/Artsy/Router/buildServerApp.tsx"],"names":["MediaStyle","buildServerApp","config","Promise","resolve","reject","context","routes","url","userAgent","user","relayEnvironment","historyMiddlewares","queryMiddleware","resolver","Resolver","render","routeConfig","redirect","status","element","headTags","matchingMediaQueries","ServerApp","ReactDOMServer","renderToString","state","tags","relaySSRMiddleware","getCache","data","loadableState","relayData","styleTags","_relayData","cleanRelayData","scripts","push","getScriptTag","serializeRelayData","join","console","error","forEach","item","i","_res","hydrationData","isJSON"],"mappings":"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","sourcesContent":["import { createRelaySSREnvironment } from \"Artsy/Relay/createRelaySSREnvironment\"\nimport { Boot } from \"Artsy/Router/Components/Boot\"\nimport queryMiddleware from \"farce/lib/queryMiddleware\"\nimport { Resolver } from \"found-relay\"\nimport createRender from \"found/lib/createRender\"\nimport { getFarceResult } from \"found/lib/server\"\nimport { getLoadableState } from \"loadable-components/server\"\nimport React, { ComponentType } from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport serialize from \"serialize-javascript\"\nimport { collectSSRStyles } from \"Utils/collectSSRStyles\"\nimport { getUser } from \"Utils/getUser\"\nimport { createMediaStyle } from \"Utils/Responsive\"\nimport { trace } from \"Utils/trace\"\nimport { RouterConfig } from \"./\"\nimport { createRouteConfig } from \"./Utils/createRouteConfig\"\nimport { matchingMediaQueriesForUserAgent } from \"./Utils/matchingMediaQueriesForUserAgent\"\n\ninterface Resolve {\n  ServerApp?: ComponentType<any>\n  redirect?: {\n    url: string\n  }\n  status?: number\n  headTags?: any[]\n  scripts?: string\n  styleTags?: string\n}\n\n// No need to invoke this for each request.\nconst MediaStyle = createMediaStyle()\n\nexport interface ServerRouterConfig extends RouterConfig {\n  userAgent?: string\n}\n\nexport function buildServerApp(config: ServerRouterConfig): Promise<Resolve> {\n  return trace(\n    \"buildServerApp\",\n    new Promise(async (resolve, reject) => {\n      try {\n        const { context = {}, routes = [], url, userAgent } = config\n        const user = getUser(context.user)\n        const relayEnvironment = context.relayEnvironment || createRelaySSREnvironment({ user }) // prettier-ignore\n        const historyMiddlewares = [queryMiddleware]\n        const resolver = new Resolver(relayEnvironment)\n        const render = createRender({})\n\n        const { redirect, status, element } = await trace(\n          \"buildServerApp.farceResults\",\n          getFarceResult({\n            url,\n            historyMiddlewares,\n            routeConfig: createRouteConfig(routes),\n            resolver,\n            render,\n          })\n        )\n\n        if (redirect) {\n          resolve({ redirect })\n          return\n        }\n\n        const headTags = [<style type=\"text/css\">{MediaStyle}</style>]\n        const matchingMediaQueries = userAgent && matchingMediaQueriesForUserAgent(userAgent) // prettier-ignore\n\n        const ServerApp = () => {\n          return (\n            <Boot\n              context={context}\n              user={user}\n              headTags={headTags}\n              onlyMatchMediaQueries={matchingMediaQueries}\n              relayEnvironment={relayEnvironment}\n              resolver={resolver}\n              routes={routes}\n            >\n              {element}\n            </Boot>\n          )\n        }\n\n        const { loadableState, relayData: _relayData, styleTags } = await trace(\n          \"buildServerApp.fetch\",\n          (async () => {\n            // Kick off relay requests to prime cache. TODO: Remove the need to\n            // do this by using persisted queries.\n            ReactDOMServer.renderToString(<ServerApp />)\n            // Extract render queue for bundle split components using dyanamic `import()`\n            const state = await getLoadableState(<ServerApp />)\n            // Extract CSS styleTags to inject for SSR pass\n            const tags = collectSSRStyles(<ServerApp />)\n            // Get serializable Relay data for rehydration on the client\n            const data = await relayEnvironment.relaySSRMiddleware.getCache()\n\n            return {\n              loadableState: state,\n              relayData: data,\n              styleTags: tags,\n            }\n          })()\n        )\n\n        // Strip response of problematic data structures\n        const relayData = cleanRelayData(_relayData)\n\n        // Build up script tags to inject into head\n        const scripts = []\n        if (loadableState) {\n          scripts.push(loadableState.getScriptTag())\n        }\n\n        scripts.push(`\n          <script>\n            var __RELAY_BOOTSTRAP__ = ${serializeRelayData(relayData)};\n          </script>\n        `)\n\n        resolve({\n          ServerApp,\n          status,\n          headTags,\n          styleTags,\n          scripts: scripts.join(\"\\n\"),\n        })\n      } catch (error) {\n        console.error(\"[Artsy/Router/buildServerApp] Error:\", error)\n        reject(error)\n      }\n    })\n  )\n}\n\n/**\n * FIXME: Relay SSR middleware is passing a _res object across which\n * has circular references, leading to issues *ONLY* on staging / prod\n * which can't be reproduced locally. This strips out _res as a quickfix\n * though this should be PR'd back at relay-modern-network-modern-ssr.\n */\nfunction cleanRelayData(relayData: any) {\n  try {\n    relayData.forEach(item => {\n      item.forEach(i => {\n        delete i._res\n      })\n    })\n  } catch (error) {\n    console.error(\"[Artsy/Router/buildServerApp] Error cleaning data\", error)\n  }\n\n  return relayData\n}\n/**\n * Serialize data for client-side consumption\n */\nfunction serializeRelayData(relayData: any) {\n  let hydrationData\n  try {\n    hydrationData = serialize(relayData, {\n      isJSON: true,\n    })\n  } catch (error) {\n    hydrationData = \"{}\"\n    console.error(\n      \"[Artsy/Router/buildServerApp] Error serializing data:\",\n      error\n    )\n  }\n  return serialize(hydrationData || {}, {\n    isJSON: true,\n  })\n}\n"],"file":"buildServerApp.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/Artsy/Router/buildServerApp.tsx"],"names":["MediaStyle","buildServerApp","config","Promise","resolve","reject","context","routes","url","userAgent","user","relayEnvironment","historyMiddlewares","queryMiddleware","resolver","Resolver","render","routeConfig","redirect","status","element","headTags","matchingMediaQueries","sheet","ServerStyleSheet","ServerApp","ReactDOMServer","renderToString","collectStyles","state","relaySSRMiddleware","getCache","data","html","tags","getStyleTags","loadableState","relayData","styleTags","bodyHTML","_relayData","cleanRelayData","scripts","push","getScriptTag","serializeRelayData","join","console","error","forEach","item","i","_res","hydrationData","isJSON"],"mappings":"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","sourcesContent":["import { createRelaySSREnvironment } from \"Artsy/Relay/createRelaySSREnvironment\"\nimport { Boot } from \"Artsy/Router/Components/Boot\"\nimport queryMiddleware from \"farce/lib/queryMiddleware\"\nimport { Resolver } from \"found-relay\"\nimport createRender from \"found/lib/createRender\"\nimport { getFarceResult } from \"found/lib/server\"\nimport { getLoadableState } from \"loadable-components/server\"\nimport React, { ComponentType } from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport serialize from \"serialize-javascript\"\nimport { ServerStyleSheet } from \"styled-components\"\nimport { getUser } from \"Utils/getUser\"\nimport { createMediaStyle } from \"Utils/Responsive\"\nimport { trace } from \"Utils/trace\"\nimport { RouterConfig } from \"./\"\nimport { createRouteConfig } from \"./Utils/createRouteConfig\"\nimport { matchingMediaQueriesForUserAgent } from \"./Utils/matchingMediaQueriesForUserAgent\"\n\ninterface Resolve {\n  ServerApp?: ComponentType<any>\n  redirect?: {\n    url: string\n  }\n  status?: number\n  headTags?: any[]\n  scripts?: string\n  styleTags?: string\n}\n\n// No need to invoke this for each request.\nconst MediaStyle = createMediaStyle()\n\nexport interface ServerRouterConfig extends RouterConfig {\n  userAgent?: string\n}\n\nexport function buildServerApp(config: ServerRouterConfig): Promise<Resolve> {\n  return trace(\n    \"buildServerApp\",\n    new Promise(async (resolve, reject) => {\n      try {\n        const { context = {}, routes = [], url, userAgent } = config\n        const user = getUser(context.user)\n        const relayEnvironment = context.relayEnvironment || createRelaySSREnvironment({ user }) // prettier-ignore\n        const historyMiddlewares = [queryMiddleware]\n        const resolver = new Resolver(relayEnvironment)\n        const render = createRender({})\n\n        const { redirect, status, element } = await trace(\n          \"buildServerApp.farceResults\",\n          getFarceResult({\n            url,\n            historyMiddlewares,\n            routeConfig: createRouteConfig(routes),\n            resolver,\n            render,\n          })\n        )\n\n        if (redirect) {\n          resolve({ redirect })\n          return\n        }\n\n        const headTags = [<style type=\"text/css\">{MediaStyle}</style>]\n        const matchingMediaQueries = userAgent && matchingMediaQueriesForUserAgent(userAgent) // prettier-ignore\n\n        const sheet = new ServerStyleSheet()\n\n        const ServerApp = () => {\n          return (\n            <Boot\n              context={context}\n              user={user}\n              headTags={headTags}\n              onlyMatchMediaQueries={matchingMediaQueries}\n              relayEnvironment={relayEnvironment}\n              resolver={resolver}\n              routes={routes}\n            >\n              {element}\n            </Boot>\n          )\n        }\n\n        const {\n          loadableState,\n          relayData: _relayData,\n          styleTags,\n          bodyHTML,\n        } = await trace(\n          \"buildServerApp.fetch\",\n          (async () => {\n            // Kick off relay requests to prime cache. TODO: Remove the need to\n            // do this by using persisted queries.\n            ReactDOMServer.renderToString(sheet.collectStyles(<ServerApp />))\n            // Extract render queue for bundle split components using dyanamic `import()`\n            const state = null // await getLoadableState(<ServerApp />)\n            // Extract CSS styleTags to inject for SSR pass\n            // const tags = collectSSRStyles(<ServerApp />)\n            // Get serializable Relay data for rehydration on the client\n            const data = await relayEnvironment.relaySSRMiddleware.getCache()\n\n            const html = ReactDOMServer.renderToString(\n              sheet.collectStyles(<ServerApp />)\n            )\n            const tags = sheet.getStyleTags()\n\n            return {\n              loadableState: state,\n              relayData: data,\n              styleTags: tags,\n              bodyHTML: html,\n            }\n          })()\n        )\n\n        // Strip response of problematic data structures\n        const relayData = cleanRelayData(_relayData)\n\n        // Build up script tags to inject into head\n        const scripts = []\n        if (loadableState) {\n          scripts.push(loadableState.getScriptTag())\n        }\n\n        scripts.push(`\n          <script>\n            var __RELAY_BOOTSTRAP__ = ${serializeRelayData(relayData)};\n          </script>\n        `)\n\n        resolve({\n          // ServerApp,\n          bodyHTML,\n          status,\n          headTags,\n          styleTags,\n          scripts: scripts.join(\"\\n\"),\n        })\n      } catch (error) {\n        console.error(\"[Artsy/Router/buildServerApp] Error:\", error)\n        reject(error)\n      }\n    })\n  )\n}\n\n/**\n * FIXME: Relay SSR middleware is passing a _res object across which\n * has circular references, leading to issues *ONLY* on staging / prod\n * which can't be reproduced locally. This strips out _res as a quickfix\n * though this should be PR'd back at relay-modern-network-modern-ssr.\n */\nfunction cleanRelayData(relayData: any) {\n  try {\n    relayData.forEach(item => {\n      item.forEach(i => {\n        delete i._res\n      })\n    })\n  } catch (error) {\n    console.error(\"[Artsy/Router/buildServerApp] Error cleaning data\", error)\n  }\n\n  return relayData\n}\n/**\n * Serialize data for client-side consumption\n */\nfunction serializeRelayData(relayData: any) {\n  let hydrationData\n  try {\n    hydrationData = serialize(relayData, {\n      isJSON: true,\n    })\n  } catch (error) {\n    hydrationData = \"{}\"\n    console.error(\n      \"[Artsy/Router/buildServerApp] Error serializing data:\",\n      error\n    )\n  }\n  return serialize(hydrationData || {}, {\n    isJSON: true,\n  })\n}\n"],"file":"buildServerApp.js"}
\ No newline at end of file
