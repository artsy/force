version: 2.1

orbs:
  artsy-remote-docker: artsy/remote-docker@volatile
  aws-s3: circleci/aws-s3@2.0.0
  hokusai: artsy/hokusai@volatile
  horizon: artsy/release@volatile
  slack: circleci/slack@4.12.1
  yarn: artsy/yarn@6.4.0

jobs:
  validate_production_schema:
    docker:
      - image: cimg/node:14.21
    parameters:
      # find channel ID at the botton of channel details view (slack app) or by right clicking on channel, and copying the link. The ID will be visible at the end of that URL.
      dev:
        type: string
        default: C02BC3HEJ
    steps:
      - yarn/setup
      - run:
          name: Validate Production Schema
          command: node scripts/validateSchemas.js production
      - slack/notify:
          event: fail
          channel: "<< parameters.dev >>"
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":warning: *Deployment Failed* :warning:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Hey there! :wave:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "A Force production deployment failed <$CIRCLE_BUILD_URL|on CircleCI> because its local Metaphysics GraphQL schema is incompatible with Metaphysics' production environment."
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "No worries though! Force deploys are usually unblocked by first deploying Metaphysics with a Deploy PR <https://github.com/artsy/metaphysics/compare/release...staging?expand=1|here on GitHub>."
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "As soon as Metaphysics' production environment is up-to-date, you can \"Rerun worflow from failed\" on the <$CIRCLE_BUILD_URL| CircleCI build page> to continue this Force deployment. :+1:"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "image",
                      "image_url": "https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png",
                      "alt_text": "CircleCI logo"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "<$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME@$CIRCLE_BRANCH (#$CIRCLE_BUILD_NUM)> â€” $CIRCLE_JOB"
                    }
                  ]
                }
              ]
            }

  create_or_update_review_app:
    executor: hokusai/beta
    parameters:
      artsy_docker_host:
        type: string
        default: docker.artsy.net
      artsy_docker_port:
        type: integer
        default: 2376
      artsy_s3_path_root:
        type: string
        default: artsy-dockerd
    steps:
      - hokusai/setup
      - artsy-remote-docker/setup-artsy-remote-docker:
          artsy_docker_host: << parameters.artsy_docker_host >>
          artsy_docker_port: << parameters.artsy_docker_port >>
          artsy_s3_path_root: << parameters.artsy_s3_path_root >>
      - hokusai/install-aws-iam-authenticator
      - hokusai/configure-hokusai
      - run:
          name: Install jq
          command: curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 > /usr/local/bin/jq
      - run:
          name: Make jq executable
          command: chmod u+x /usr/local/bin/jq
      - run:
          name: "Create or update review app"
          command: |
            review_app_name=$(echo $CIRCLE_BRANCH | sed 's/review-app-//')
            kubectl config use-context staging
            if $(kubectl get namespace | grep -qi $review_app_name); then
              ./scripts/update_review_app.sh $review_app_name
            else
              ./scripts/build_review_app.sh $review_app_name
            fi

  # TODO: Experiment. Remove when done testing SWC compiler
  test:
    docker:
      - image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/force:$CIRCLE_SHA1-builder
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    working_directory: /app
    parallelism: 6
    environment:
      JEST_JUNIT_OUTPUT_DIR: /app/reports/junit/
      JEST_JUNIT_UNIQUE_OUTPUT_NAME: true
      # TODO: Remove this flag once things have stabilized
      EXPERIMENTAL_SWC_COMPILER_ENABLED: false
    steps:
      - run: yarn test --reporters=default --reporters=jest-junit --shard=$(expr $CIRCLE_NODE_INDEX + 1)/$CIRCLE_NODE_TOTAL
      - store_artifacts:
          path: /app/reports/junit/
      - store_test_results:
          path: /app/reports/junit/

  type-check:
    docker:
      - image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/force:$CIRCLE_SHA1-builder
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    working_directory: /app
    environment:
      - NODE_ENV: test
    steps:
      - run: yarn type-check

  check-pr:
    docker:
      - image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/force:$CIRCLE_SHA1-builder
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    working_directory: /app
    steps:
      - run: node scripts/strictness-migration.js check-pr
      - run:
          name: Danger
          command: yarn danger ci --verbose
      - run:
          name: Prevent Strictness Regressions
          command: node scripts/strictness-migration.js check-pr

  relay-check:
    docker:
      - image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/force:$CIRCLE_SHA1-builder
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    working_directory: /app
    steps:
      - run: yarn relay

  acceptance:
    docker:
      - image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/force:$CIRCLE_SHA1-electron-runner
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    working_directory: /app
    parallelism: 6
    steps:
      - run: /app/scripts/xvfb-run.sh /usr/local/bin/yarn test:smoke
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  upload-docs:
    docker:
      - image: "cimg/python:3.11"
    steps:
      - aws-s3/sync:
          arguments: --acl public-read
          from: storybook-static
          to: "s3://artsy-static-sites/artsy-force-storybook"

  detect-secrets:
    docker:
      - image: artsy/detect-secrets:ci # pragma: allowlist secret
    resource_class: small
    working_directory: /usr/src/app
    steps:
      - checkout
      - run: git ls-files -z | xargs -0 detect-secrets-hook --baseline .secrets.baseline --verbose

  smoke-test-on-live-env:
    docker:
      - image: cypress/included:10.11.0
        environment:
          TERM: xterm
    working_directory: ~/app
    parallelism: 6
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: yarn install
      - run: |
          TESTS=$(circleci tests glob "cypress/e2e/**/*" | circleci tests split | paste -sd ',')
          ./node_modules/.bin/cypress run --config baseUrl=$SMOKE_TEST_TARGET --spec $TESTS
      - store_artifacts:
          path: cypress/screenshots

not_main_or_staging_or_release: &not_main_or_staging_or_release
  filters:
    branches:
      ignore:
        - main
        - staging
        - release

not_staging_or_release: &not_staging_or_release
  filters:
    branches:
      ignore:
        - staging
        - release

only_main: &only_main
  context: hokusai
  filters:
    branches:
      only: main

only_release: &only_release
  context: hokusai
  filters:
    branches:
      only: release

workflows:
  default:
    jobs:
      - detect-secrets:
          <<: *not_main_or_staging_or_release

      # Main build
      - artsy-remote-docker/buildkit-build:
          <<: *not_staging_or_release
          context: hokusai
          executor: hokusai/beta
          name: builder-image-build
          pre-steps:
            - run:
                command: echo 'export BUILD_TARGET="builder";' >> $BASH_ENV

      - artsy-remote-docker/buildkit-push:
          <<: *not_staging_or_release
          context: hokusai
          executor: hokusai/beta
          name: builder-image-push
          requires:
            - builder-image-build
          pre-steps:
            - run:
                command: echo 'export BUILD_TARGET="builder";' >> $BASH_ENV

      # Electron Runner build
      - artsy-remote-docker/buildkit-build:
          <<: *not_staging_or_release
          context: hokusai
          executor: hokusai/beta
          name: electron-runner-image-build
          requires:
            - builder-image-build
          pre-steps:
            - run:
                command: echo 'export BUILD_TARGET="electron-runner";' >> $BASH_ENV

      - artsy-remote-docker/buildkit-push:
          <<: *not_staging_or_release
          context: hokusai
          executor: hokusai/beta
          name: electron-runner-image-push
          requires:
            - electron-runner-image-build
          pre-steps:
            - run:
                command: echo 'export BUILD_TARGET="electron-runner";' >> $BASH_ENV

      # Test steps
      - test:
          <<: *not_staging_or_release
          context: hokusai
          requires:
            - builder-image-push

      - type-check:
          <<: *not_staging_or_release
          context: hokusai
          requires:
            - builder-image-push

      - check-pr:
          <<: *not_staging_or_release
          context: hokusai
          requires:
            - builder-image-push

      - relay-check:
          <<: *not_staging_or_release
          context: hokusai
          requires:
            - builder-image-push

      - acceptance:
          <<: *not_staging_or_release
          context: hokusai
          requires:
            - electron-runner-image-push

      # Staging
      - artsy-remote-docker/buildkit-build:
          <<: *only_main
          context: hokusai
          executor: hokusai/beta
          name: production-image-build
          requires:
            - builder-image-build

      - artsy-remote-docker/buildkit-push:
          <<: *only_main
          context: hokusai
          executor: hokusai/beta
          name: production-image-push
          requires:
            - test
            - type-check
            - relay-check
            - acceptance
            - production-image-build

      - hokusai/deploy-staging:
          <<: *only_main
          name: deploy-staging
          project-name: force
          executor: hokusai/beta
          requires:
            - production-image-push
          post-steps:
            - slack/notify:
                event: fail
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "plain_text",
                            "text": "Force staging deploy has failed!"
                          }
                        ]
                      }
                    ]
                  }

      # Release
      - horizon/block:
          context: horizon
          project_id: 11
          filters:
            branches:
              only:
                - release

      - smoke-test-on-live-env:
          filters:
            branches:
              only:
                - staging

      - validate_production_schema:
          <<: *only_release

      # Production
      - hokusai/deploy-production:
          <<: *only_release
          executor: hokusai/beta
          name: deploy-production
          requires:
            - horizon/block
            - validate_production_schema

      - create_or_update_review_app:
          context: hokusai
          filters:
            branches:
              only: /^review-app-.*/
          pre-steps:
            - run:
                command: echo 'export DOCKER_BUILDKIT=1; export BUILDKIT_PROGRESS=plain; export COMPOSE_DOCKER_CLI_BUILD=1;' >> $BASH_ENV

      # Docs / Storybooks
      - yarn/run:
          <<: *only_main
          name: build-docs
          script: "build-storybook"
          post-steps:
            - persist_to_workspace:
                root: .
                paths:
                  - storybook-static
      - upload-docs:
          <<: *only_main
          context: static-sites-uploader
          requires:
            - build-docs
          pre-steps:
            - attach_workspace:
                at: .
